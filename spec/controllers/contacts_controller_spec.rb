require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ContactsController, type: :controller do

  let!(:contact) { FactoryGirl.create(:contact) }

  context "Post in API for create cookie" do
    it "#create_cookie" do
      expect {
        post :cookie, params: {}
      }.to change(Contact, :count).by(1)
    end
  end

  context "Post in API for create access" do
    it "#create_access" do
      expect {
        post :access, params: {url: "http://www.example.com.br/", key: contact.key}
      }.to change(Access, :count).by(1)
    end
  end

  describe "GET #index" do
    it "assigns all contacts as @contacts" do
      get :index, params: {}
      expect(assigns(:contacts)).to eq([contact])
    end
  end

  describe "GET #show" do
    it "assigns the requested contact as @contact" do
      get :show, params: {id: contact.to_param}
      expect(assigns(:contact)).to eq(contact)
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested contact" do
      expect {
        delete :destroy, params: {id: contact.to_param}
      }.to change(Contact, :count).by(-1)
    end

    it "redirects to the contacts list" do
      delete :destroy, params: {id: contact.to_param}
      expect(response).to redirect_to(contacts_url)
    end
  end

end
